# Automation Project Rules ‚Äì Python + Selenium + Pytest
# Focus: POM, SOLID Principles, Maintainable & Scalable Code

## üéØ Core Principles

### SOLID Principles
- **Single Responsibility**: Each function should do only 1 thing
- **Open/Closed**: Code should be open for extension, closed for modification
- **Liskov Substitution**: Derived classes should be substitutable for their base classes
- **Interface Segregation**: Avoid unnecessary method signatures
- **Dependency Inversion**: Dependencies should depend on abstractions

### POM (Page Object Model)
- Separate page elements from test logic
- Each page should contain its own functions

### DRY & KISS
- **DRY**: Don't Repeat Yourself
- **KISS**: Keep It Simple, Stupid
- **Single Purpose Functions**: Functions should be clear and serve a single purpose

## üìÅ Project Structure Standards

```
project_root/
‚îú‚îÄ‚îÄ pages/                       # Page Objects
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ base_page.py
‚îÇ   ‚îú‚îÄ‚îÄ home_page.py
‚îÇ   ‚îú‚îÄ‚îÄ search_result_page.py
‚îÇ   ‚îú‚îÄ‚îÄ login_page.py
‚îÇ   ‚îî‚îÄ‚îÄ cart_page.py
‚îú‚îÄ‚îÄ tests/                       # Test Cases
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ conftest.py
‚îÇ   ‚îú‚îÄ‚îÄ test_homepage.py
‚îÇ   ‚îú‚îÄ‚îÄ test_search.py
‚îÇ   ‚îú‚îÄ‚îÄ test_login.py
‚îÇ   ‚îî‚îÄ‚îÄ test_cart.py
‚îú‚îÄ‚îÄ utils/                       # Utilities & Helpers
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ wait_helper.py
‚îÇ   ‚îú‚îÄ‚îÄ data_helper.py
‚îÇ   ‚îî‚îÄ‚îÄ config_helper.py
‚îú‚îÄ‚îÄ drivers/                     # WebDriver setup
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îî‚îÄ‚îÄ driver_factory.py
‚îú‚îÄ‚îÄ .env                         # Environment variables
‚îú‚îÄ‚îÄ pytest.ini                   # Pytest config
‚îú‚îÄ‚îÄ requirements.txt
‚îî‚îÄ‚îÄ README.md
```

## üìù Coding Standards

### 1. Function Design
- Function names should start with verbs (click_, enter_, get_, select_)
- Each function should do only 1 thing
- Function docstring format:

```python
def click_filter(self, index: int) -> None:
    """
    Clicks the filter at the specified index.

    Args:
        index: Index of the filter element to click
    """
    self.click_element_by_index(self.FILTERS, index)
    time.sleep(1)
```

### 2. Page Object Model Rules
- Each page should be a single class
- Locators should be defined as private (_locator_name) within the class
- Public methods should only contain business logic
- BasePage should contain common functions for all pages (click, send_keys, wait_for, etc.)

Example:
```python
from selenium.webdriver.common.by import By
from utils.wait_helper import WaitHelper

class HomePage:
    _SEARCH_BOX = (By.ID, "searchData")
    _SEARCH_BUTTON = (By.CLASS_NAME, "searchBtn")
    
    def __init__(self, driver):
        self.driver = driver
        self.wait = WaitHelper(driver)

    def enter_search_keyword(self, keyword: str) -> None:
        """
        Enters search keyword in the search box.
        
        Args:
            keyword: The keyword to search for
        """
        self.wait.for_element_visible(self._SEARCH_BOX)
        self.driver.find_element(*self._SEARCH_BOX).send_keys(keyword)

    def click_search_button(self) -> None:
        """
        Clicks the search button on the home page.
        """
        self.wait.for_element_clickable(self._SEARCH_BUTTON)
        self.driver.find_element(*self._SEARCH_BUTTON).click()
```

### 3. Error Handling
- Use try/except for non-critical operations
- Log errors and take screenshots in error cases
- Provide clear error messages when tests fail

### 4. Wait Strategies
- Never use time.sleep() unless absolutely necessary
- All explicit wait methods should be in WaitHelper:

```python
def for_element_clickable(self, locator: tuple, timeout: int = 10) -> None:
    """
    Waits for the element to be clickable.

    Args:
        locator: Tuple(By, value)
        timeout: Timeout in seconds
    """
    WebDriverWait(self.driver, timeout).until(
        EC.element_to_be_clickable(locator)
    )
```

### 5. Data Management
- Use .env for configuration management
- Test data should be kept in separate JSON/CSV files or data helper classes

## üö´ Anti-Patterns to Avoid
- Large functions (>20 lines)
- Hard-coded values
- Defining locators inside test cases
- Using Thread.sleep()

## üîç Code Review Checklist
- [ ] Are functions single responsibility?
- [ ] Is POM structure followed?
- [ ] Is code duplication avoided?
- [ ] Are errors being logged?
- [ ] Is wait strategy used correctly?

## üìä Performance Guidelines
- Prioritize ID for locating elements
- Avoid unnecessary element searches
- Use smart waiting (explicit waits)

## üõ†Ô∏è Development Guidelines

### Import Standards
```python
# Standard library imports
import time
import logging
from typing import Optional, List, Tuple

# Third-party imports
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import pytest

# Local imports
from pages.base_page import BasePage
from utils.wait_helper import WaitHelper
```

### Class Structure
```python
class ExamplePage(BasePage):
    """Example page object with proper structure."""
    
    # Private locators
    _EXAMPLE_BUTTON = (By.ID, "example-button")
    _EXAMPLE_INPUT = (By.NAME, "example-input")
    
    def __init__(self, driver):
        super().__init__(driver)
        self.wait = WaitHelper(driver)
    
    def click_example_button(self) -> None:
        """Clicks the example button."""
        self.wait.for_element_clickable(self._EXAMPLE_BUTTON)
        self.driver.find_element(*self._EXAMPLE_BUTTON).click()
    
    def enter_example_text(self, text: str) -> None:
        """Enters text into the example input field."""
        self.wait.for_element_visible(self._EXAMPLE_INPUT)
        self.driver.find_element(*self._EXAMPLE_INPUT).send_keys(text)
```

### Test Structure
```python
import pytest
from pages.home_page import HomePage
from pages.search_result_page import SearchResultPage

class TestSearch:
    """Search functionality test class."""
    
    @pytest.mark.smoke
    def test_basic_search(self, driver):
        """Tests basic search functionality."""
        # Arrange
        home_page = HomePage(driver)
        search_page = SearchResultPage(driver)
        
        # Act
        home_page.enter_search_keyword("phone")
        home_page.click_search_button()
        
        # Assert
        assert search_page.is_results_visible()
        assert search_page.get_result_count() > 0
    
    @pytest.mark.parametrize("keyword,expected_count", [
        ("phone", 10),
        ("laptop", 8),
        ("book", 15)
    ])
    def test_search_different_keywords(self, driver, keyword, expected_count):
        """Tests search with different keywords."""
        # Arrange
        home_page = HomePage(driver)
        search_page = SearchResultPage(driver)
        
        # Act
        home_page.enter_search_keyword(keyword)
        home_page.click_search_button()
        
        # Assert
        actual_count = search_page.get_result_count()
        assert actual_count >= expected_count
```

## üîß Configuration Standards

### pytest.ini
```ini
[tool:pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = 
    -v
    --tb=short
    --strict-markers
    --disable-warnings
    --html=reports/report.html
    --self-contained-html
markers =
    smoke: smoke tests
    regression: regression tests
    slow: slow running tests
```

### requirements.txt
```
selenium>=4.15.0
pytest>=7.4.0
pytest-html>=3.2.0
pytest-xdist>=3.3.0
webdriver-manager>=4.0.0
python-dotenv>=1.0.0
```

### conftest.py
```python
import pytest
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager

@pytest.fixture(scope="function")
def driver():
    """WebDriver fixture."""
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service)
    driver.maximize_window()
    yield driver
    driver.quit()

@pytest.fixture
def home_page(driver):
    """HomePage fixture."""
    return HomePage(driver)
```

## üìã Naming Conventions

### Files
- Page objects: `snake_case_page.py`
- Test files: `test_snake_case.py`
- Utility files: `snake_case_helper.py`

### Classes
- Page objects: `PascalCasePage`
- Test classes: `TestPascalCase`
- Helper classes: `PascalCaseHelper`

### Methods
- Action methods: `verb_noun()` (click_button, enter_text)
- Getter methods: `get_noun()` (get_title, get_price)
- Checker methods: `is_noun()` (is_visible, is_enabled)

### Variables
- Constants: `UPPER_SNAKE_CASE`
- Private variables: `_lower_snake_case`
- Public variables: `lower_snake_case`

## üéØ Test Execution Commands

```bash
# Run all tests
pytest

# Run only smoke tests
pytest -m smoke

# Run specific test file
pytest tests/test_search.py

# Run with verbose output
pytest -v

# Generate HTML report
pytest --html=reports/report.html

# Run tests in parallel
pytest -n auto

# Run tests with specific browser
pytest --browser=chrome
```

## üîç Test Organization

### Test Categories
- **Smoke Tests**: Critical functionality tests
- **Regression Tests**: Comprehensive functionality tests
- **Slow Tests**: Time-consuming tests

### Test Data Management
- Use fixtures for test data
- Keep test data in separate files
- Use parametrize for data-driven tests

### Assertions
- Use descriptive assertion messages
- Group related assertions
- Use appropriate assertion methods

## 1. üõ†Ô∏è √áevre Kurulumu (Environment Setup)

### Test Otomasyon √áer√ßevesi Se√ßimi:
- **Pytest** (zaten se√ßtik)
- **Selenium WebDriver**
- **Page Object Model (POM)**

### Gerekli Ara√ßlar:
```bash
# Virtual environment olu≈ütur
python -m venv n11_automation_env

# Environment aktif et
source n11_automation_env/bin/activate  # Mac/Linux
# n11_automation_env\Scripts\activate  # Windows

# Gerekli paketleri y√ºkle
pip install -r requirements.txt
```

### requirements.txt i√ßeriƒüi:
```txt
selenium>=4.15.0
pytest>=7.4.0
pytest-html>=3.2.0
pytest-xdist>=3.3.0
webdriver-manager>=4.0.0
python-dotenv>=1.0.0
```

## 2.  Raporlama ve Entegrasyon

### Test Raporlama Mekanizmasƒ±:
```ini
# pytest.ini
[tool:pytest]
addopts = 
    --html=reports/report.html
    --self-contained-html
    --json=reports/report.json
```

### HTML Rapor √ñrneƒüi:
```python
# conftest.py
import pytest
from datetime import datetime

@pytest.hookimpl(tryfirst=True)
def pytest_configure(config):
    """Configure custom markers."""
    config.addinivalue_line(
        "markers", "smoke: smoke tests"
    )
    config.addinivalue_line(
        "markers", "regression: regression tests"
    )

def pytest_html_report_title(report):
    """Customize HTML report title."""
    report.title = "N11 Automation Test Report"

def pytest_html_results_summary(prefix, summary, postfix):
    """Add custom summary to HTML report."""
    prefix.extend([
        f"<p><strong>Test Date:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>",
        f"<p><strong>Project:</strong> N11 E-commerce Automation</p>"
    ])
```

### Git Versiyonlama:
```bash
# Git repository ba≈ülat
git init

# .gitignore dosyasƒ± olu≈ütur
echo "*.pyc
__pycache__/
.env
reports/
screenshots/
*.log
.DS_Store" > .gitignore

# ƒ∞lk commit
git add .
git commit -m "Initial commit: N11 automation project setup"
```

## 3. üìù README.md Dosyasƒ±

```markdown
# N11 E-commerce Automation Project

## üéØ Project Overview
This project contains automated tests for N11 e-commerce website using Python, Selenium, and Pytest.

## Ô∏è Project Structure
```
n11_automation/
‚îú‚îÄ‚îÄ pages/                       # Page Objects
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ base_page.py
‚îÇ   ‚îú‚îÄ‚îÄ home_page.py
‚îÇ   ‚îú‚îÄ‚îÄ search_result_page.py
‚îÇ   ‚îú‚îÄ‚îÄ login_page.py
‚îÇ   ‚îî‚îÄ‚îÄ cart_page.py
‚îú‚îÄ‚îÄ tests/                       # Test Cases
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ conftest.py
‚îÇ   ‚îú‚îÄ‚îÄ test_homepage.py
‚îÇ   ‚îú‚îÄ‚îÄ test_search.py
‚îÇ   ‚îú‚îÄ‚îÄ test_login.py
‚îÇ   ‚îî‚îÄ‚îÄ test_cart.py
‚îú‚îÄ‚îÄ utils/                       # Utilities & Helpers
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ wait_helper.py
‚îÇ   ‚îú‚îÄ‚îÄ data_helper.py
‚îÇ   ‚îî‚îÄ‚îÄ config_helper.py
‚îú‚îÄ‚îÄ drivers/                     # WebDriver setup
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îî‚îÄ‚îÄ driver_factory.py
‚îú‚îÄ‚îÄ reports/                     # Test Reports
‚îú‚îÄ‚îÄ screenshots/                 # Screenshots on failure
‚îú‚îÄ‚îÄ .env                         # Environment variables
‚îú‚îÄ‚îÄ pytest.ini                   # Pytest config
‚îú‚îÄ‚îÄ requirements.txt
‚îî‚îÄ‚îÄ README.md
```

##  Setup Instructions

### Prerequisites
- Python 3.8+
- Chrome Browser
- Git

### Installation
1. Clone the repository:
```bash
git clone <repository-url>
cd n11_automation
```

2. Create virtual environment:
```bash
python -m venv venv
source venv/bin/activate  # Mac/Linux
# venv\Scripts\activate  # Windows
```

3. Install dependencies:
```bash
pip install -r requirements.txt
```

##  Running Tests

### Run all tests:
```bash
pytest
```

### Run smoke tests only:
```bash
pytest -m smoke
```

### Run specific test file:
```bash
pytest tests/test_search.py
```

### Generate HTML report:
```bash
pytest --html=reports/report.html
```

## üìä Test Reports
- HTML reports are generated in `reports/` directory
- Screenshots are saved in `screenshots/` directory on test failures
- JSON reports are available for CI/CD integration

## Ô∏è Test Categories
- **Smoke Tests**: Critical functionality tests
- **Regression Tests**: Comprehensive functionality tests
- **Slow Tests**: Time-consuming tests

## üîß Configuration
- Environment variables are managed in `.env` file
- Pytest configuration is in `pytest.ini`
- WebDriver setup is in `conftest.py`

## üìù Contributing
1. Follow the coding standards defined in `.cursorrules`
2. Write tests using Page Object Model
3. Use appropriate test markers
4. Update documentation when needed

## üìû Support
For questions or issues, please contact the automation team.
```

## 4. üéØ √ñzet

Bu maddeler ≈üunlarƒ± istiyor:

### √áevre Kurulumu:
- **Test framework kurulumu** (Pytest + Selenium)
- **Gerekli ara√ßlarƒ±n y√ºklenmesi** (WebDriver, plugins)
- **Virtual environment olu≈üturma**

### Raporlama ve Entegrasyon:
- **HTML/JSON raporlarƒ±** olu≈üturma
- **Git repository** kurulumu
- **README.md** ile proje dok√ºmantasyonu
- **CI/CD entegrasyonu** i√ßin hazƒ±rlƒ±k

Bu adƒ±mlarƒ± tamamladƒ±ƒüƒ±nƒ±zda, profesyonel bir test otomasyon projesi elde edeceksiniz!
