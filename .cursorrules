# QA Automation Project Rules (Rev. 2025-08-13)

## 1. Genel Mimari
- Page Object Model (POM) kullanılacak.
- Her sayfa tek bir Python sınıfı olacak; public metodlar iş akışını yönetecek, private metodlar teknik etkileşimleri yönetecek.
- SOLID prensipleri gözetilecek. Kod tekrarından kaçınılacak (DRY).

## 2. BasePage Zorunlulukları
BasePage sınıfı en az aşağıdaki metotlara sahip olmalı:
- `click(locator, timeout=DEFAULT_TIMEOUT)`
- `type(locator, value, timeout=DEFAULT_TIMEOUT, clear=True)`
- `wait_visible(locator, timeout=DEFAULT_TIMEOUT)`
- `wait_clickable(locator, timeout=DEFAULT_TIMEOUT)`
- `find(locator)`
- `find_all(locator)`
- `click_nth(locator, index, timeout=DEFAULT_TIMEOUT)`
- `js_click(locator)`
- `scroll_into_view(locator)`
- `screenshot_on_fail(file_name=None)`

Tüm testlerde element etkileşimleri bu metotlar üzerinden yapılacak.

## 3. Yasaklar
- `time.sleep()` KESİNLİKLE yasak. Beklemeler yalnızca explicit wait ile yapılacak.
- Test dosyaları içinde locator tanımı yasak.
- Implicit wait kullanılmayacak (`driver.implicitly_wait(0)`).
- Testlerde iş mantığı yazılmayacak; sadece Given/When/Then akışı olacak.

## 4. Locator Kuralları
- Öncelik: `id` > `data-*` attribute > stabil `class` > anlamlı `title`/`aria-*` > href > text.
- CSS selector mümkünse XPATH yerine tercih edilecek.
- Indexli seçimlerde `nth-child` veya `click_nth` metodu kullanılacak.
- Locator sabitleri page sınıflarında private (`_ELEMENT_NAME`) tutulacak.

## 5. Test Organizasyonu
- Tüm testler `tests/` klasöründe olacak.
- Test fonksiyon isimleri `test_` ile başlayacak.
- Fixture isimleri açık ve net olacak (`driver`, `home_page`, `login_page` vb.).
- `pytest.ini` içinde kullanılan tüm marker’lar tanımlı olacak (örn: `smoke`, `regression`, `slow`).

## 6. Parametrizasyon
- Aynı akış farklı verilerle çalıştırılacaksa `@pytest.mark.parametrize` kullanılacak.
- Test verileri `.env`, fixture veya harici data dosyalarından yüklenecek.

## 7. Logging ve Raporlama
- Her public action INFO seviyesinde loglanacak.
- Hata durumunda ERROR log + otomatik ekran görüntüsü alınacak.
- HTML rapor için `pytest-html`, opsiyonel olarak Allure desteği sağlanacak.
- CI/CD ortamında rapor çıktıları `reports/` klasörüne kaydedilecek.

## 8. Retry ve Flaky Önlemleri
- `pytest-rerunfailures` eklenecek.
- StaleElementReferenceException ve benzeri durumlar için BasePage metotlarında en az 1 retry yapılacak.

## 9. Docstring ve Typing
- Tüm public metotlar Google veya NumPy stili docstring ile açıklanacak.
- Tip ipuçları (type hints) zorunlu.
- Fonksiyon satır sayısı mümkünse 30’u aşmayacak.

## 10. Git & Ortam Kuralları
- `__pycache__/`, `.pytest_cache/`, `reports/`, `screenshots/`, `.env` `.gitignore` içinde olacak.
- `requirements.txt` versiyon numaraları sabitlenecek.
- `README.md` kurulum, çalıştırma ve rapor alma adımlarını içerecek.

## 11. Kod Yazma Kuralları
- **SADECE** kullanıcının istediği spesifik fonksiyonu yaz.
- Kullanıcı tek bir fonksiyon istiyorsa, başka fonksiyonlar ekleme.
- "Helper" veya "yardımcı" metodlar ekleme, sadece isteneni yap.
- Gereksiz fonksiyon yazma, kullanıcıyı yorma.
- Kullanıcı açıkça istemediği sürece ek metodlar yazma.

## 12. Örnek Given/When/Then Yapısı
```python
def test_example(driver, home_page):
    # Given
    home_page.open()

    # When
    home_page.search("sesa")

    # Then
    assert home_page.is_search_result_correct("sesa")
